(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Always load newest byte code
(setq load-prefer-newer t)


;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 50000000)


;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; quit Emacs directly even if there are running processes
(setq confirm-kill-processes nil)


;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

(package-install 'use-package)
(setq use-package-always-ensure t)
(require 'use-package)

(use-package paredit
  :ensure t
  :init
  (add-hook 'clojure-mode-hook #'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook #'enable-paredit-mode)
  :config
  (show-paren-mode t)
  :diminish nil)

(use-package rainbow-delimiters)

(use-package clojure-mode
  :config
  ;; teach clojure-mode about some macros that I use on projects like
  ;; nREPL and Orchard
  (define-clojure-indent
    (returning 1)
    (testing-dynamic 1)
    (testing-print 1))

  (add-hook 'clojure-mode-hook #'paredit-mode)
  (add-hook 'clojure-mode-hook #'subword-mode)
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))

(use-package inf-clojure
  :config
  (add-hook 'inf-clojure-mode-hook #'paredit-mode)
  (add-hook 'inf-clojure-mode-hook #'rainbow-delimiters-mode))

(use-package cider
  :config
  (setq nrepl-log-messages t)
  (add-hook 'cider-repl-mode-hook #'paredit-mode)
  (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))

(use-package magit)

(use-package google-translate
  :config
  (require 'google-translate-default-ui)
  (global-set-key "\C-cT" 'google-translate-query-translate)
  (global-set-key "\C-ct" 'google-translate-smooth-translate)  
  (setq google-translate-translation-directions-alist '(("en" . "fr")
                                                        ("fr" . "en"))))

(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))


(require 'org)
;; (defvar *starter-kit-init-file* (expand-file-name "~/.emacs.d/emacs24-starter-kit/init.el"))
;; (append load-path (list (file-name-directory *starter-kit-init-file*)))`
;; (load *starter-kit-init-file*)
;; I need it for the loop construct that I use. 
(require 'cl)

;; Zoom in/out from the following link.
;; http://emacs-fu.blogspot.com/2008/12/zooming-inout.html
(defun djcb-zoom (n)
  "with positive N, increase the font size, otherwise decrease it"
  (set-face-attribute 'default (selected-frame) :height
                      (+ (face-attribute 'default :height) (* (if (> n 0) 1 -1) 10))))


(djcb-zoom 1)
(djcb-zoom 1)
(djcb-zoom 1)
(djcb-zoom 1)

;; https://emacsredux.com/blog/2022/06/03/detecting-whether-emacs-is-running-in-terminal-or-gui-mode/
;; Codes that only run in GUI mode
(add-hook 'after-make-frame-functions
          (lambda ()
            ;; we want some font only in GUI Emacs
            (when (display-graphic-p)
              (djcb-zoom -1))
            (unless (display-graphic-p)
              (load-theme 'tango-dark))))

(add-hook 'after-init-hook
  (lambda ()
    ;; we want some font only in GUI Emacs
    (when (display-graphic-p)
      (djcb-zoom -1))
    (unless (display-graphic-p)
      (load-theme 'tango-dark)
      )
    ))

;; List of color themes just for reference
;; (load-theme 'adwaita)
;; (load-theme 'deeper-blue)
;; (load-theme 'dichromacy)
;; (load-theme 'leuven-dark)
;; (load-theme 'leuven)
;; (load-theme 'light-blue)
;; (load-theme 'manoj-dark)
;; (load-theme 'misterioso)o
;; (load-theme 'modus-operandi)
;; (load-theme 'moduss)
;; (load-theme 'modus-vivendi)
;; (load-theme 'tango-dark)
;; (load-theme 'tango)
;; (load-theme 'tsdh-dark)
;; (load-theme 'tsdh-light)
;; (load-theme 'wheatgrass)
;; (load-theme 'whiteboard)
;; (load-theme 'wombat)


;; The absolute minimum

;; (package-initialize)

;; fix the delete key so that it deletes instead of backspacing
;; (global-set-key [delete] 'delete-char)

;; bind  C-h to delete. This is useful when you are not on the console
;; so that the backspace does not give you the help command
;; If you are always at the console, you may comment it out
(define-key global-map "\C-h" 'backward-delete-char-untabify )

;; bind M-? to help. C-h usually does this but we changed it above
;; If you are always at the console, you may comment it out
(define-key global-map "\M-?" 'help-for-help )



;; ========================================
;; Prefer Backward-kill over backspaces
;; ========================================
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

;; Changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)


;; ========================================
;; Switching buffer
;; ========================================
(define-key ctl-x-map "\C-b" 'switch-to-buffer)
(defun my-switch-to-buffer()
  (interactive)
  (switch-to-buffer nil))

(global-set-key "\C-[\C-[" 'my-switch-to-buffer)
;; (global-set-key "\C-[\C-[" 'ff-find-other-file)
;; (global-set-key "\C-[\C-[" 'slime-next-connection)


;; ========================================
;; Compile
;; ========================================

;; bind C-x c to start the compiler
(define-key ctl-x-map "c" 'compile)

;; bind C-x c to start the compiler
(define-key ctl-x-map "\C-c" 'compile)

(setq-default compile-target "make -k")
(setq-default compilation-ask-about-save nil) ;; Stop asking me about

(defun my-compile ()
  (interactive)
  (save-buffer) ;; Save Current Buffer. 
  (compile compile-command ))

(define-key ctl-x-map "c" 'my-compile)
(define-key ctl-x-map "\C-c" 'my-compile)


;; ========================================
;; Invoke M-x without using alt key.
;; ========================================
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-d" 'delete-horizontal-space)


;; ========================================
;; Indentation
;; ========================================
;; just spaces
(setq-default indent-tabs-mode nil)


;; ========================================
;; Get rid of the bars
;; ========================================
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(put 'narrow-to-region 'disabled nil)


;; ========================================
;; Misc
;; ========================================
;; This is what you probably want if you are using a tiling window
;; manager under X, such as ratpoison or stumpwm
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; I am tired of getting the case changed while expanding a word
(setq dabbrev-case-replace nil)

;; Display time in emacs
(display-time)

;; just spaces
(setq-default indent-tabs-mode nil)

;; ========================================
;; Perl
;; ========================================
;; http://www.perlmonks.org/?node_id=650413
;; Use cperl-mode instead of the default perl-mode
(defalias 'perl-mode 'cperl-mode)

;; ========================================
;; My Utility Function
;; ========================================

;; http://www.emacswiki.org/emacs/IncrementNumber
(defun increment-number-at-point ()
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
(global-set-key (kbd "C-c +") 'increment-number-at-point)



;; For Debugging
(defun string/starts-with (string prefix)
  "Return t if STRING starts with prefix."
  (and (string-match (rx-to-string `(: bos ,prefix) t)
                     string)
       t))
;; Compare files
(defvar *my-debug-suffix* "/sudo:root@localhost:")

(defun my-debug-open ()
  "Open the file as sudo or ssh mode"
  (interactive)
  (let ((file-name (buffer-file-name))
        (p (length *my-debug-suffix*))
        (s (length (buffer-file-name))))
    (if (string/starts-with file-name *my-debug-suffix*)
        (find-file (substring file-name (- p s)))
      (find-file (concat *my-debug-suffix* file-name))
      )))

(define-key ctl-x-map "t" 'my-debug-open)

(defvar *project-pairs*
  '(("/home/p-hasan/mnt/hasan-itd22/E/Git/banner_db"      "/home/p-hasan/mnt/hasan-itd22/E/Git/my_banner_db")
    ("/home/p-hasan/mnt/hasan-itd22/E/Git/banner_scripts" "/home/p-hasan/mnt/hasan-itd22/E/Git/my_banner_scripts")
    ("/home/p-hasan/mnt/hasan-itd22/E/Git/banner_apps"    "/home/p-hasan/mnt/hasan-itd22/E/Git/my_banner_apps")))

(defun l-my-find-in-pair (filename pairs)
  (let ()
    (if pairs
        (let* ((pair (car pairs))
               (r1 (first pair))
               (r2 (second pair))
               (p1 (length r1))
               (p2 (length r2))
               (suffix ""))

          (cond ((string-prefix-p r1 filename)
                 (progn 
                  (setq suffix (substring filename p1 ))
                  (list (concat r1 suffix)
                        (concat r2 suffix))))
                ((string-prefix-p r2 filename)
                 (progn
                   (setq suffix (substring filename p2 ))
                   (list (concat r1 suffix)
                         (concat r2 suffix))))
                (t (l-my-find-in-pair filename (cdr pairs)))))
      nil)))

(defun my-find-in-pair (filename)
  "Find things in the project pair"
  (let ()
    (l-my-find-in-pair filename *project-pairs*)
    ))


;; (my-find-in-pair "/home/p-hasan/mnt/hasan-itd22/E/Git/my_banner_db/APASOAA/Tables/OAP_SARADAP.sql")
;; (my-find-in-pair "/home/p-hasan/mnt/hasan-itd22/E/Git/banner_apps/banner/wtlweb/plus/viewwmnu.sql")


(defun my-open-other-project () 
  "Open the same file from the other project" 
  (interactive) 
  (let* ((file-name (buffer-file-name))
         (my-found (my-find-in-pair file-name)))
    (if my-found
        (let ()
          (delete-other-windows) 
          (split-window-right) 
          (find-file (first my-found))
          (other-window 1)
          (find-file (second my-found))
          (other-window 1)))))


(defvar *project-1* "/home/p-hasan/mnt/hasan-itd22/E/Git/banner_db") 
(defvar *project-2* "/home/p-hasan/mnt/hasan-itd22/E/Git/my_banner_db")
;; (setq *project-1* "/home/p-hasan/mnt/hasan-itd22/C/my_kjar_projects") 
;; (setq *project-2* "/home/p-hasan/mnt/hasan-itd22/C/exported_kjar_projects")
(defun my-open-other-project () 
  "Open the same file from the other project" 
  (interactive) 
  (let ((file-name (buffer-file-name))
        (p1 (length *project-1*))
        (p2 (length *project-2*)))
    (message "%s" file-name)
    (cond 
     ;; Conditon
     ;; ---------------------- 
     ((string-prefix-p *project-1* file-name)
      ;; Do something
      (progn 
        (delete-other-windows) 
        (split-window-right) 
        (other-window 1)
        (find-file (concat *project-2* (substring file-name p1)))
        (other-window 1)))
     ;; Another Condition
     ;; ----------------------
     ((string-prefix-p *project-2* file-name) 
      ;; Do something 
      (progn 
        (delete-other-windows) 
        (split-window-right) 
        (find-file (concat *project-1* (substring file-name p2)))
        (other-window 1))))))


;; (define-key ctl-x-map "t" 'my-open-other-project)

;; (add-to-list 'warning-suppress-types '(undo discard-info))
(defvar *counter* 1)
(setq *counter* 27)
(defun my-insert-and-increment-counter ()
  (interactive)
  (insert (number-to-string *counter*))
  (setq *counter* (1+ *counter*)))

;; (setq *counter* 3)


;; ========================================
;; Slime
;; ========================================
;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")




;; ========================================
;; Modes
;; ========================================
(require 'tramp)

;; ========================================
;; IDO
;; ========================================
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)


;; ========================================
;; org-mode
;; ========================================
(define-key global-map "\C-ca" 'org-agenda)
;; (global-set-key (kbd "C-c l") #'org-store-link)
;; (global-set-key (kbd "C-c a") #'org-agenda)
;; (global-set-key (kbd "C-c c") #'org-capture)


(global-set-key (kbd "C-c s") #'org-store-link)
(global-set-key (kbd "C-c i") #'org-insert-link-global)
(global-set-key (kbd "C-c o") #'org-open-at-point-global)


(defun toggle-diary-agenda()
  (interactive)
  (setq org-agenda-include-diary (not org-agenda-include-diary)))

;; ========================================
;; Calendar 
;; ========================================

(setq calendar-latitude 49.728668)
(setq calendar-longitude -112.804588)



;; Cider mode
(add-hook 'cider-repl-mode-hook
          (lambda ()
            (define-key cider-repl-mode-map (kbd "C-c M-o") 'cider-repl-clear-buffer )))
;; Sage
(setq sage-shell:sage-root "/home/p-hasan/soft/SageMath")


;; Latex 
(defun wrap-last-word () 
  "We will wrap the last word in $$" 
  (save-excursion 
    (backward-word) 
    (insert "$") 
    (forward-word) 
    (insert "$")))

(defun wrap-mathbb () 
  "We will wrap the last word in \mathbb" 
  (save-excursion 
    (backward-word) 
    (insert "\\mathbb{") 
    (forward-word) 
    (insert "}")))

(add-hook 'latex-mode-hook
          (lambda ()
            (define-key latex-mode-map (kbd "C-x m") '(lambda nil (interactive) 
                                                        (wrap-last-word)))
            (define-key latex-mode-map (kbd "C-x p") '(lambda nil (interactive) 
                                                        (wrap-mathbb)))
            (define-key latex-mode-map (kbd "C-x j") '(lambda nil (interactive) 
                                                        (wrap-mathscr)))))

;; (global-set-key "\C-xm" '(lambda nil (interactive) (wrap-last-word)))

;; (global-set-key "\C-xp" '(lambda nil (interactive)  (wrap-mathbb)))

;; (global-set-key "\C-xj" '(lambda nil (interactive) (wrap-mathscr)))
;; (setq register-preview-delay 0)


; (require 'multi-web-mode)
; (setq mweb-default-major-mode 'html-mode)
; (setq mweb-tags 
;   '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
;     (js-mode  "<script[^>]*>" "</script>")
;     (css-mode "<style[^>]*>" "</style>")))
; (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
; (multi-web-global-mode 1)

;; (require 'unicode-fonts)
;; (unicode-fonts-setup)

;; Clojure

(add-hook 'clojure-mode-hook
          '(lambda ()
             (enable-paredit-mode)
             (show-paren-mode t)
             (local-set-key (kbd "C-M-q") 'cider-macroexpand-1)))

(add-hook 'emacs-lisp-mode-hook
          '(lambda ()
             (enable-paredit-mode)
             (show-paren-mode t)))

;; (setq lisp-mode-hook nil)
(add-hook 'lisp-mode-hook
          '(lambda ()
             (enable-paredit-mode)
             (show-paren-mode t)
             (local-set-key (kbd "C-M-q") 'slime-macroexpand-1)))

(setq column-number-mode t)
(setq line-move-visual nil)
(setq track-eol t)




;; nxml mode
(require 'hideshow)
(require 'sgml-mode)
(require 'nxml-mode)


;; Maxima mode
;; (autoload 'maxima-mode "maxima" "Maxima mode" t)
;; (autoload 'maxima "maxima" "Maxima interaction" t)
;; (setq auto-mode-alist (cons '("\\.mac" . maxima-mode) auto-mode-alist))


;; ;; https://emacs.stackexchange.com/questions/2884/the-old-how-to-fold-xml-question
;; (add-to-list 'hs-special-modes-alist
;;              '(nxml-mode
;;                "<!--\\|<[^/>]*[^/]>"
;;                "-->\\|</[^/>]*[^/]>"
;; 
;;                "<!--"
;;                sgml-skip-tag-forward
;;                nil))
;; 
;; 
;; 
;; (add-hook 'nxml-mode-hook 'hs-minor-mode)
;; 
;; ;; optional key bindings, easier than hs defaults
;; (define-key nxml-mode-map (kbd "C-c t") 'hs-toggle-hiding)

;; Octave mode 
;; (setq auto-mode-alist
;;       (cons '("\\.m$" . octave-mode) auto-mode-alist))



;; (defvar *starter-kit-init-file* (expand-file-name "~/emacs24-starter-kit/init.el"))
;; (append load-path (list (file-name-directory *starter-kit-init-file*)))


(if nil
    (let ()
      (require 'f)
      ;; (require 'emacs-with-nyxt)
      (use-package moldable-emacs
        :init (if (f-directory-p "~/.emacs.d/lisp/moldable-emacs")
                  (shell-command "cd ~/.emacs.d/lisp/moldable-emacs; git pull;")
                (shell-command "cd ~/.emacs.d/lisp/; git clone https://github.com/ag91/moldable-emacs.git"))
        :load-path "~/.emacs.d/lisp/moldable-emacs/"
        :bind (("C-c m m" . me-mold)
               ("C-c m f" . me-go-forward)
               ("C-c m b" . me-go-back)
               ("C-c m o" . me-open-at-point)
               ("C-c m d" . me-mold-docs)
               ("C-c m g" . me-goto-mold-source)
               ("C-c m e a" . me-mold-add-last-example)
               )
        :config
        (require 'moldable-emacs)
        ;; (add-to-list 'me-files-with-molds (concat (file-name-directory (symbol-file 'me-mold)) "molds/experiments.el")) ;; TODO this is relevant only if you have private molds
        (me-setup-molds))      
      ))

;; https://lahtela.me/2020/05/21/setting-up-emacs-for-qt-development.html
;; (use-package company
;;   :ensure t
;;   :config
;;   (setq company-show-numbers t)
;;   (setq company-tooltip-align-annotations t)
;;   (setq company-tooltip-flip-when-above t)
;;   (global-company-mode))
;; 
;; (use-package company-quickhelp
;;   :ensure t
;;   :init
;;   (company-quickhelp-mode 1)
;;   (use-package pos-tip
;;     :ensure t))
;; 
;; (use-package lsp-mode :ensure t)
;; (use-package lsp
;;   :ensure lsp-mode
;;   :config
;;   ;; (require 'lsp-clients)
;;   (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
;;   :init
;;   (setf lsp-eldoc-render-all nil)
;;   (setq lsp-inhibit-message t)
;;   (setq lsp-message-project-root-warning t))
;; 
;; (use-package lsp-ui :ensure t :commands lsp-ui-mode)
;; (use-package ccls
;;     :ensure t
;;     :hook ((c-mode c++-mode objc-mode cuda-mode) .
;;          (lambda () (require 'ccls) (lsp))))

;;  (use-package company-lsp :ensure t)

(setq dired-dwim-target t)

(setq-default c-basic-offset 4 )

;; Adjustment for my bigger screen so windows appear vertically
(setq split-height-threshold 160)

(defun expand-banner-db (git-file)
  (let ()
    (concat "/home/p-hasan/mnt/hasan-itd18/D/Git/banner_db/"  git-file)))

(defun my-open-banner-db ()
  "Open the Git file"
  (interactive)
    (find-file (expand-banner-db (thing-at-point 'filename))))

(setq enable-local-variables :safe)


;; (setq csv-separators ("," "	"))
;; (setq csv-separators '("	"))

;; JAVA LSP
;; (require 'flycheck)
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024))
(setenv "JAVA_HOME"  "/home/p-hasan/.sdkman/candidates/java/17.0.6-tem")
(setq lsp-java-java-path "/home/p-hasan/.sdkman/candidates/java/17.0.6-tem/bin/java")
(setq lsp-java-server-install-dir "/home/p-hasan/soft/java_lsp/")
;; (require 'lsp-java)
;; (add-hook 'java-mode-hook #'lsp)
;; (require 'flycheck)
;; (global-flycheck-mode +1)


;; (use-package projectile)q
;; (use-package flycheck)
;; (use-package lsp-mode :hook ((lsp-mode . lsp-enable-which-key-integration)))
;; (use-package hydra)
;; (use-package company)
;; (use-package lsp-ui)
;; (use-package which-key :config (which-key-mode))
;; (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
;; (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
;; (use-package dap-java :ensure nil)
;; (use-package lsp-treemacs)


;; (setq lsp-java-format-on-type-enabled nil)
;; (setq lsp-enable-on-type-formatting nil)
;; (setq lsp-completion-enable-additional-text-edit nil)


;; w3m
;; (require 'w3m-load)
;; (require 'mime-w3m)

;; Tramp
(customize-set-variable
 'tramp-ssh-controlmaster-options
 (concat
  "-o ControlPath=/home/p-hasan/.ssh/master-%%r@%%h:%%p "
  "-o ControlMaster=auto -o ControlPersist=yes"))

;; (require 'ejc-sql)

;; (require 'window-number)
;; (require 'vlf-setup)
;; (require 'ejc-sql)
;; (add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/ejc-sql-conf.el"))
;; (require 'ejc-sql-conf)
;; (server-start)

;; (setq common-lisp-hyperspec-root "http://www.lispworks.com/reference/HyperSpec/")
;; (require 'hyperspec)

;; (require 'clhs)
;; (load "/home/p-hasan/quicklisp/clhs-use-local.el" t)

;; (require 'rtags)
;; (cmake-ide-setup)


;; (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/asymptote"))
;; (require 'asy-mode)

;; (lsp-register-client
;;  (make-lsp-client :new-connection (lsp-stdio-connection '("asy" "-lsp"))
;;                   :activation-fn (lsp-activate-on "asymptote")
;;                   :major-modes '(asy-mode)
;;                   :server-id 'asyls
;;                   ))

;; config changes made through the customize UI will be stored here
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

(when (file-exists-p custom-file)
  (load custom-file))
