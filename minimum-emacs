;; The absolute minimum

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t) 
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Always load newest byte code
(setq load-prefer-newer t)

(package-install 'use-package)
(setq use-package-always-ensure t)
(require 'use-package)

(use-package paredit
  :ensure t
  :init
  (add-hook 'clojure-mode-hook #'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook #'enable-paredit-mode)
  :config
  (show-paren-mode t)
  :diminish nil)

(defun djcb-zoom (n)
  "with positive N, increase the font size, otherwise decrease it"
  (set-face-attribute 'default (selected-frame) :height
                      (+ (face-attribute 'default :height) (* (if (> n 0) 1 -1) 10))))

(add-hook 'after-make-frame-functions
          (lambda ()
            ;; we want some font only in GUI Emacs
            (when (display-graphic-p)
              (let ()
               (djcb-zoom 1)
               (djcb-zoom 1)))
            (unless (display-graphic-p)
              (load-theme 'tango-dark))))

(add-hook 'after-init-hook
  (lambda ()
    ;; we want some font only in GUI Emacs
    (when (display-graphic-p)
      (let ()
        (djcb-zoom 1)
        (djcb-zoom 1)))
    (unless (display-graphic-p)
      (load-theme 'tango-dark))))

;; fix the delete key so that it deletes instead of backspacing
;; (global-set-key [delete] 'delete-char)

;; bind  C-h to delete. This is useful when you are not on the console
;; so that the backspace does not give you the help command
;; If you are always at the console, you may comment it out
(define-key global-map "\C-h" 'backward-delete-char-untabify )

;; bind M-? to help. C-h usually does this but we changed it above
;; If you are always at the console, you may comment it out
(define-key global-map "\M-?" 'help-for-help )

;; bind C-x c to start the compiler
(define-key ctl-x-map "c" 'compile)

;; bind C-x c to start the compiler
(define-key ctl-x-map "\C-c" 'compile)


;; ========================================
;; Prefer Backward-kill over backspaces
;; ========================================
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

;; Changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)


;; ========================================
;; Switching buffer
;; ========================================
(define-key ctl-x-map "\C-b" 'switch-to-buffer)
(defun my-switch-to-buffer()
  (interactive)
  (switch-to-buffer nil))
(global-set-key "\C-[\C-[" 'my-switch-to-buffer)


;; ========================================
;; Compile
;; ========================================
(setq-default compile-target "make -k")
(setq-default compilation-ask-about-save nil) ;; Stop asking me about

(defun my-compile ()
  (interactive)
  (save-buffer) ;; Save Current Buffer. 
  (compile compile-command ))

(define-key ctl-x-map "c" 'my-compile)
(define-key ctl-x-map "\C-c" 'my-compile)

;; ========================================
;; Invoke M-x without using alt key.
;; ========================================
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-d" 'delete-horizontal-space)


;; ========================================
;; Indentation
;; ========================================
;; just spaces
(setq-default indent-tabs-mode nil)


;; ========================================
;; Get rid of the bars
;; ========================================
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)



;; ========================================
;; IDO
;; ========================================
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)


;; ========================================
;; Dired Target Next Window
(setq dired-dwim-target t)


;; ========================================
;; C Mode
(defun my-c-mode-common-hook ()
  ;; my customizations for all of c-mode and related modes
  (let ()
    ;; Unbound the prefix key first
    (local-set-key "\C-]" nil)
    (local-set-key "\C-]\C-]" 'ff-find-other-file)
    ))


(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; ================================================================================
;; Paredit Hooks

;; (require 'paredit)
;; (add-hook 'clojure-mode-hook
;;           '(lambda ()
;;             (enable-paredit-mode)
;;             (show-paren-mode t)))
;; 
;; (add-hook 'emacs-lisp-mode-hook
;;           '(lambda ()
;;             (enable-paredit-mode)
;;             (show-paren-mode t)))
;; 
;; (add-hook 'lisp-mode-hook
;;           '(lambda ()
;;             (enable-paredit-mode)
;;             (show-paren-mode t)
;;             (local-set-key (kbd "C-M-q") 'slime-macroexpand-1)))

